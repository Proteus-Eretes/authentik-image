version: 1
metadata:
  name: Proteus - OAuth2 Provider - Scopes
entries:
  - model: authentik_providers_oauth2.scopemapping
    identifiers:
      name: oauth-scope-openid
      managed: goauthentik.io/providers/oauth2/scope-openid
    attrs:
      name: "OpenID 'openid'"
      scope_name: openid
      expression: |
        # This scope is required by the OpenID-spec, and must as such exist in authentik.
        # The scope by itself does not grant any information
        return {}
  - model: authentik_providers_oauth2.scopemapping
    identifiers:
      name: oauth-scope-email
      managed: goauthentik.io/providers/oauth2/scope-email
    attrs:
      name: "OpenID 'email'"
      scope_name: email
      description: "Email address"
      expression: |
        return {
          "email": request.user.email,
          "email_verified": True
        }
  - model: authentik_providers_oauth2.scopemapping
    identifiers:
      name: oauth-scope-profile
      managed: goauthentik.io/providers/oauth2/scope-profile
    attrs:
      name: "OpenID 'profile'"
      scope_name: profile
      description: "General Profile Information"
      expression: |
        return {
          # Because authentik only saves the user's full name, and has no concept of first and last names,
          # the full name is used as given name.
          # You can override this behaviour in custom mappings, i.e. `request.user.name.split(" ")`
          "name": request.user.name,
          "given_name": request.user.name,
          "family_name": "",
          "preferred_username": request.user.username,
          "nickname": request.user.username,
          "groups": [group.name for group in request.user.ak_groups.all()],
        }
  - model: authentik_providers_oauth2.scopemapping
    identifiers:
      name: oauth-scope-proteus
      managed: proteus-eretes.nl/providers/oauth2/scope-proteus
    attrs:
      name: "OpenID 'proteus'"
      scope_name: proteus
      description: "Proteus Specific Information"
      expression: |
        return {
          # This adds some Proteus specific information about the user to the request.
          "proteusId": request.user.attributes.proteusId,
          "lastSync": request.user.attributes.lastSync,
        }
